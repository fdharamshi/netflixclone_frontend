{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","src","poster_path","backdrop_path","alt","name","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.da848e26.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport Youtube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    // if [], run once when the row loads, and don't run it again.\r\n\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      // console.log(request.data.results);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  const opts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      autoplay: 1,\r\n    },\r\n  };\r\n\r\n  const handleClick = (movie) => {\r\n    if(trailerUrl){\r\n      setTrailerUrl(\"\");\r\n    }else{\r\n      movieTrailer(movie?.name || \"\")\r\n      .then(url => {\r\n        const urlParams = new URLSearchParams(new URL(url).search);\r\n        setTrailerUrl(urlParams.get(\"v\"));\r\n        // console.log(`search result: ${urlParams.get(\"v\")}`);\r\n      }).catch((error) => console.log(error));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n\r\n      <div className=\"row__posters\">\r\n\r\n        {movies.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            // onClick={() => handleClick(movie)}\r\n            className={`row__poster ${(isLargeRow && \"row__posterLarge\")}`}\r\n            src={`${base_url}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY = \"1fd53e386944e3f69145a25aab0e1e89\";\r\n\r\nconst requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_network=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default requests;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport requests from \"./requests\";\r\nimport './Banner.css'\r\n\r\nfunction Banner() {\r\n  const [movie, setMovie] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(requests.fetchNetflixOriginals);\r\n      setMovie(\r\n        request.data.results[\r\n          Math.floor(Math.random() * request.data.results.length - 1)\r\n        ]\r\n      );\r\n      return request;\r\n    }\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  // console.log(movie);\r\n\r\n  function truncate(str, n){\r\n    return str?.length > n ? str.substr(0, n-1) + \"...\" : str;\r\n  }\r\n\r\n  return (\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n        backgroundPosition: \"center center\",\r\n      }}\r\n    >\r\n      <div className=\"banner__contents\">\r\n        {/* {title} */}\r\n        <h1 className=\"banner__title\">{movie?.title || movie?.name || movie?.original_name}</h1>\r\n\r\n        {/* {div > two buttons} */}\r\n        <div className=\"banner__buttons\">\r\n          <button className=\"banner__button\">Play</button>\r\n          <button className=\"banner__button\">My List</button>\r\n        </div>\r\n\r\n\r\n        {/* {description} */}\r\n        <h1 className=\"banner__description\">\r\n          {truncate(movie?.overview, 150)}\r\n        </h1>\r\n      </div>\r\n\r\n      <div className=\"banner--fadeBottom\"></div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, {useEffect, useState} from 'react'\r\nimport './Nav.css'\r\n\r\nfunction Nav() {\r\n\r\n    const [show, handleShow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        \r\n        window.addEventListener(\"scroll\", () => {\r\n            if(window.scrollY > 100){\r\n                handleShow(true);\r\n            }else handleShow(false);\r\n        });\r\n\r\n        return () => {\r\n            window.removeEventListener(\"scroll\", ()=>{});\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className={`nav ${show && \"nav__black\"}`}>\r\n\r\n            <img className=\"nav__logo\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/799px-Netflix_2015_logo.svg.png\"\r\n            alt=\"Logo\" />\r\n\r\n            <img className=\"nav__avatar\" src=\"https://i.pinimg.com/originals/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.png\"  alt=\"Logo\"/>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav;\r\n","import \"./App.css\";\nimport Row from \"./Row\";\nimport requests from \"./requests\";\nimport Banner from \"./Banner\";\nimport Nav from './Nav';\n\n// TBDb API Key : 1fd53e386944e3f69145a25aab0e1e89\n// https://netflixclone-83782.web.app/\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Banner />\n      <Row\n        title=\"NETFLIX ORIGINALS\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchNetflixOriginals} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}